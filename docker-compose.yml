version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  postgres-order:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: orders_db
    ports:
      - "5433:5432"
    volumes:
      - pgdata_order:/var/lib/postgresql/data
    networks:
      - app-network

  postgres-notification:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: notification_db
    ports:
      - "5434:5432"
    volumes:
      - pgdata_notification:/var/lib/postgresql/data
    networks:
      - app-network

  postgres-stock:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: stock_db
    ports:
      - "5435:5432"
    volumes:
      - pgdata_stock:/var/lib/postgresql/data
    networks:
      - app-network

  order-service:
    build:
      context: ./order-service/src
      dockerfile: ../_docker/app/Dockerfile
    container_name: order-service
    depends_on:
      - rabbitmq
      - postgres-order
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: postgres-order
      DB_PORT: 5432
      DB_DATABASE: orders_db
      DB_USERNAME: user
      DB_PASSWORD: pass
      RABBITMQ_HOST: rabbitmq
    user: "${UID}:${GID}"
    volumes:
      - ./order-service/src:/var/www
    networks:
      - app-network

  notification-service:
    build:
      context: ./notification-service/src
      dockerfile: ../_docker/app/Dockerfile
    container_name: notification-service
    depends_on:
      - rabbitmq
      - postgres-notification
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: postgres-notification
      DB_PORT: 5432
      DB_DATABASE: notification_db
      DB_USERNAME: user
      DB_PASSWORD: pass
      RABBITMQ_HOST: rabbitmq
    user: "${UID}:${GID}"
    volumes:
      - ./notification-service/src:/var/www
    networks:
      - app-network

  stock-service:
    build:
      context: ./stock-service/src
      dockerfile: ../_docker/app/Dockerfile
    container_name: stock-service
    depends_on:
      - rabbitmq
      - postgres-stock
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: postgres-stock
      DB_PORT: 5432
      DB_DATABASE: stock_db
      DB_USERNAME: user
      DB_PASSWORD: pass
      RABBITMQ_HOST: rabbitmq
    user: "${UID}:${GID}"
    volumes:
      - ./stock-service/src:/var/www
    networks:
      - app-network

  order-nginx:
    image: nginx:alpine
    container_name: order-nginx
    depends_on:
      - order-service
    ports:
      - "8001:80"
    volumes:
      - ./order-service/src:/var/www:ro
      - ./order-service/_docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network

  notification-nginx:
    image: nginx:alpine
    container_name: notification-nginx
    depends_on:
      - notification-service
    ports:
      - "8002:80"
    volumes:
      - ./notification-service/src:/var/www:ro
      - ./notification-service/_docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network

  stock-nginx:
    image: nginx:alpine
    container_name: stock-nginx
    depends_on:
      - stock-service
    ports:
      - "8003:80"
    volumes:
      - ./stock-service/src:/var/www:ro
      - ./stock-service/_docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network

  order-listener:
    build:
      context: ./order-service/src
      dockerfile: ../_docker/app/Dockerfile
    container_name: order-listener
    depends_on:
      - rabbitmq
      - postgres-order
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: postgres-order
      DB_PORT: 5432
      DB_DATABASE: orders_db
      DB_USERNAME: user
      DB_PASSWORD: pass
      RABBITMQ_HOST: rabbitmq
    user: "${UID}:${GID}"
    volumes:
      - ./order-service/src:/var/www
      - ./order-service/_docker/scripts:/_docker/scripts:ro
    networks:
      - app-network
    command: sh /_docker/scripts/start-listener.sh

  stock-listener:
    build:
      context: ./stock-service/src
      dockerfile: ../_docker/app/Dockerfile
    container_name: stock-listener
    depends_on:
      - rabbitmq
      - postgres-stock
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: postgres-stock
      DB_PORT: 5432
      DB_DATABASE: stock_db
      DB_USERNAME: user
      DB_PASSWORD: pass
      RABBITMQ_HOST: rabbitmq
    user: "${UID}:${GID}"
    volumes:
      - ./stock-service/src:/var/www
      - ./stock-service/_docker/scripts:/_docker/scripts:ro
    networks:
      - app-network
    command: sh /_docker/scripts/start-listener.sh

  notification-listener:
    build:
      context: ./notification-service/src
      dockerfile: ../_docker/app/Dockerfile
    container_name: notification-listener
    depends_on:
      - rabbitmq
      - postgres-notification
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: postgres-notification
      DB_PORT: 5432
      DB_DATABASE: notification_db
      DB_USERNAME: user
      DB_PASSWORD: pass
      RABBITMQ_HOST: rabbitmq
    user: "${UID}:${GID}"
    volumes:
      - ./notification-service/src:/var/www
      - ./notification-service/_docker/scripts:/_docker/scripts:ro
    networks:
      - app-network
    command: sh /_docker/scripts/start-listener.sh

networks:
  app-network:
    driver: bridge

volumes:
  pgdata_order:
  pgdata_notification:
  pgdata_stock: